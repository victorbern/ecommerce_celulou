// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categoria {
  codigoCategoria     String              @id @db.VarChar(12)
  nomeCategoria       String              @unique
  produtoHasCategoria ProdutoHasCategoria[]
}

model Produto {
  codigoProduto       String              @id @db.VarChar(12)
  valor               Decimal             @db.Decimal(10,2)
  nomeProduto         String?
  marca               String?             @db.VarChar(60)
  descricaoProduto    String?
  imagensFolder       String?             @db.VarChar(45)
  nota                Decimal?            @db.Decimal(3,2)
  pesoGramas          Float
  larguraCM           Decimal             @db.Decimal(10,2)
  alturaCM            Decimal             @db.Decimal(10,2)
  comprimentoCM       Decimal             @db.Decimal(10,2)
  isDisponivelCompra  Boolean
  isVisivel           Boolean
  produtoHasCategoria ProdutoHasCategoria[]
  estoque             Estoque?
  avaliacao           Avaliacao[]
  pedidoHasProduto    PedidoHasProduto[]
  clienteHasProdutoFavorito ClienteHasProdutoFavorito[]
}

model ProdutoHasCategoria {
  codigoProduto       String
  codigoCategoria     String
  produto             Produto             @relation(fields: [codigoProduto], references: [codigoProduto], onUpdate: Restrict, map: "produto_has_categoria_ibfk_1")
  categoria           Categoria           @relation(fields: [codigoCategoria], references: [codigoCategoria], onUpdate: Restrict, map: "produto_has_categoria_ibfk_2", onDelete: Cascade)
  @@id([codigoProduto, codigoCategoria])
  @@index([codigoCategoria], map: "codigoCategoria")
}

model Estoque {
  codigoEstoque       String              @id @db.VarChar(12)
  codigoProduto       String              @unique
  quantidade          Int
  produto             Produto             @relation(fields: [codigoProduto], references: [codigoProduto], onUpdate: Restrict, map: "estoque_ibfk_1")
  alteracoesEstoque   AlteracoesEstoque[]
  @@index([codigoProduto], map: "codigoProduto")
}

model AlteracoesEstoque {
  codigoAlteracaoEstoque String              @id @db.VarChar(12)
  valorAlteracao      Int
  dataAlteracao       DateTime
  codigoEstoque       String
  estoque             Estoque             @relation(fields: [codigoEstoque], references: [codigoEstoque], onUpdate: Restrict, map: "alteracoes_estoque_ibfk_1")
  @@index([codigoEstoque], map: "codigoEstoque")
}

model Cliente {
  codigoCliente       String              @id @db.VarChar(12)
  cpfCliente          String              @unique
  nomeCliente         String              @db.VarChar(60)
  celularCliente      String              @db.VarChar(12)
  emailCliente        String              @unique
  createdAt           DateTime?
  endereco            Endereco[]
  clienteHasProdutoFavorito ClienteHasProdutoFavorito[]
}

model Endereco {
  codigoEndereco      String              @id @db.VarChar(12)
  nomeEndereco        String?             
  cep                 String?             @db.VarChar(12)
  nomeRua             String?             @db.VarChar(60)
  numeroCasa          String?             @db.VarChar(10)
  complemento         String?             @db.VarChar(60)
  bairro              String?             @db.VarChar(60)
  cidade              String              @db.VarChar(60)
  estado              String              @db.VarChar(60)
  codigoCliente       String
  cliente             Cliente             @relation(fields: [codigoCliente], references: [codigoCliente], onUpdate: Restrict, map: "endereco_ibfk_1", onDelete: Cascade)
  @@index([codigoCliente], map: "codigoCliente")
}

model Avaliacao {
  codigoAvaliacao     String              @id @db.VarChar(12)
  titulo              String?             @db.VarChar(60)
  descricao           String?             @db.VarChar(120)
  imagensFolder       String?             @db.VarChar(30)
  nota                Decimal             @db.Decimal(3,2)
  nomeCliente         String              @db.VarChar(60)
  cpfCliente          String
  dataAvaliacao       DateTime
  codigoProduto       String            
  produto             Produto             @relation(fields: [codigoProduto], references: [codigoProduto], onUpdate: Restrict, map: "avaliacao_ibfk_1")
}

model Pedido {
  codigoPedido        String              @id @db.VarChar(12)
  isPago              Boolean
  formaPagamento      String?             @db.VarChar(30)
  parcelas            String?             @db.VarChar(30)
  dataPagamento       DateTime?
  isEntregue          Boolean
  dataEntrega         DateTime?
  subtotal            Decimal?            @db.Decimal(10,2)
  valorFrete          Decimal?            @db.Decimal(10,2)
  descontoCupom       Decimal?            @db.Decimal(10,2)
  total               Decimal             @db.Decimal(10,2)
  nomeCliente         String              
  cpfCliente          String
  cep                 String
  dadosEndereco       String
  pedidoHasProduto    PedidoHasProduto[]
}

model PedidoHasProduto {
  codigoProduto       String
  codigoPedido        String
  quantidade          Int?
  valorUnitario       Decimal?            @db.Decimal(10,2)
  produto             Produto             @relation(fields: [codigoProduto], references: [codigoProduto], onUpdate: Restrict, map: "codigoProduto")
  pedido              Pedido              @relation(fields: [codigoPedido], references: [codigoPedido], onUpdate: Restrict, map: "codigoPedido")
  @@id([codigoProduto, codigoPedido])
}

model ClienteHasProdutoFavorito {
  codigoProduto       String
  codigoCliente       String
  produto             Produto             @relation(fields: [codigoProduto], references: [codigoProduto], onUpdate: Restrict, map: "codigoProduto")
  cliente             Cliente             @relation(fields: [codigoCliente], references: [codigoCliente], onUpdate: Restrict, map: "codigoCliente")
  @@id([codigoProduto, codigoCliente])
}